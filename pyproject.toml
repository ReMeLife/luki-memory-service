[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "luki-memory-service"
version = "1.0.0"
description = "Memory and embedding service for LUKi AI assistant"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Proprietary"}
authors = [
    {name = "REMELife Team", email = "dev@remelife.com"}
]
keywords = ["ai", "memory", "embeddings", "rag", "luki"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # Core dependencies
    
    # Web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Data validation and serialization
    "pydantic>=2.5.0",
    
    # Vector database and embeddings
    "chromadb>=0.4.15",
    "sentence-transformers>=2.2.2",
    
    # NLP and text processing
    "spacy>=3.7.0",
    "transformers>=4.35.0",
    
    # Database and storage
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.0",
    
    # Async support
    "asyncio-mqtt>=0.13.0",
    "aiofiles>=23.2.0",
    "aiohttp>=3.9.0",
    
    # Security and authentication
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Configuration and environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    
    # Logging and monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "httpx>=0.25.0",
    
    # Data processing
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    
    # Testing (dev dependencies)
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # for testing FastAPI
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

gpu = [
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "torchaudio>=2.1.0",
]

grpc = [
    "grpcio>=1.59.0",
    "grpcio-tools>=1.59.0",
    "protobuf>=4.25.0",
]

[project.urls]
Homepage = "https://github.com/REMELife/luki-memory-service"
Repository = "https://github.com/REMELife/luki-memory-service"
Documentation = "https://docs.remelife.com/luki/memory-service"
"Bug Tracker" = "https://github.com/REMELife/luki-memory-service/issues"

[project.scripts]
luki-memory = "luki_memory.api.http:main"
luki-memory-dev = "scripts.run_dev:main"
luki-memory-migrate = "scripts.migrate:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["luki_memory*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
luki_memory = ["api/*.proto", "prompts/*.txt", "config/*.yaml"]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=luki_memory",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow running",
    "asyncio: marks tests as async"
]

# Coverage configuration
[tool.coverage.run]
source = ["luki_memory"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["luki_memory"]
known_third_party = [
    "fastapi",
    "pydantic",
    "chromadb",
    "sentence_transformers",
    "spacy",
    "sqlalchemy",
    "pytest",
]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "sentence_transformers.*",
    "spacy.*",
    "transformers.*",
]
ignore_missing_imports = true

# Flake8 linting (in setup.cfg format for compatibility)
[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "migrations",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process for tests
